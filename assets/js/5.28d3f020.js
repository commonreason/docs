(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{207:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"common-reason"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-reason"}},[e._v("#")]),e._v(" Common Reason")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://discord.gg/DZbg4rZ",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/discord/586902457053872148.svg",alt:"Discord"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("Common Reason")]),e._v(" is a blockchain platform with smart contracts based\non logic programming (Datalog) and relational database.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v('Nowadays, most smart contract platforms out in the wild treat smart\ncontracts as "programs", storage as "file systems". However, by\nstoring contracts as binary blob on chain, it becomes difficult to\nreason about the internals of the contracts or to derive additional\nfunctionality out of it.')]),e._v(" "),a("p",[a("strong",[e._v("Common Reason")]),e._v(" aims at trying out a different approach. Here, we\ntreat the whole storage as a relational database, with a reduced logic\nprogramming engine, Datalog, built on top of it. Actions, which are\nnormal WebAssembly programs, operates on and modify the predicates in\nthe relational database, to update the state.")]),e._v(" "),a("h2",{attrs:{id:"basic-information"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-information"}},[e._v("#")]),e._v(" Basic Information")]),e._v(" "),a("p",[e._v("If you are wondering, we're still in the "),a("em",[e._v("Design Phase")]),e._v(" of "),a("strong",[e._v("Common\nReason")]),e._v(" blockchain. This is a hobby project, so things may take some\ntime to take off. In the mean time, we welcome you to join our\n"),a("a",{attrs:{href:"https://discord.gg/VbdWT6c",target:"_blank",rel:"noopener noreferrer"}},[e._v("Discord"),a("OutboundLink")],1),e._v(", or leave a comment on our\nGithub issues, if you have any questions regarding this blockchain.")]),e._v(" "),a("p",[e._v("The blockchain is most likely to be launched with Proof of Work\nconsensus without pre-mine.")]),e._v(" "),a("h2",{attrs:{id:"accounts-and-smart-contracts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accounts-and-smart-contracts"}},[e._v("#")]),e._v(" Accounts and Smart Contracts")]),e._v(" "),a("p",[a("strong",[e._v("Common Reason")]),e._v(" blockchain uses an account-based state model. All\naccounts and smart contracts in the blockchain are called\n"),a("strong",[e._v("cells")]),e._v(". Each cell contains the following information.")]),e._v(" "),a("h3",{attrs:{id:"identifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identifier"}},[e._v("#")]),e._v(" Identifier")]),e._v(" "),a("p",[e._v("Atom identifier that can be used in logic predicates. For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("id Kitty;\n")])])]),a("p",[e._v("Defines a kitty identifier. Besides user-defined identifiers, there\nare two system-defined identifiers "),a("code",[e._v("User")]),e._v(", which represents either an\naccount or a smart contract, and "),a("code",[e._v("uint")]),e._v(", which represents unsigned\ninteger.")]),e._v(" "),a("h3",{attrs:{id:"fact-relations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fact-relations"}},[e._v("#")]),e._v(" Fact Relations")]),e._v(" "),a("p",[e._v("Relations define semantics of the data.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("fact owner(kitty: Kitty, user: User);\nfact parent(parent: Kitty, child: Kitty);\n")])])]),a("p",[e._v("This declares the "),a("code",[e._v("owner")]),e._v(" and "),a("code",[e._v("parent")]),e._v(" relationship. Using this, facts\ncan be defined as the actual data stored in each cell. For example,\nbelow is a fact.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("owner(K1, U1);\nowner(K2, U1);\nparent(K1, K2);\n")])])]),a("p",[e._v("It states that user "),a("code",[e._v("U1")]),e._v(" is an owner of "),a("code",[e._v("K1")]),e._v(" and "),a("code",[e._v("K2")]),e._v(", and "),a("code",[e._v("K1")]),e._v(" is a\nparent of "),a("code",[e._v("K2")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"rule-relations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rule-relations"}},[e._v("#")]),e._v(" Rule Relations")]),e._v(" "),a("p",[e._v("Rules are built on top of facts. For example, one can say:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("rule ancestor(a: Kitty, b: Kitty);\nancestor(a, b) <- parent(a, b);\nancestor(a, b), c <- parent(a, c), ancestor(c, b);\n")])])]),a("p",[e._v("This declares the rule "),a("code",[e._v("ancestor")]),e._v(". Ancestors are parents, or parents\nof parents.")]),e._v(" "),a("h4",{attrs:{id:"procedural-rules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#procedural-rules"}},[e._v("#")]),e._v(" Procedural Rules")]),e._v(" "),a("p",[e._v("A particular clause of the body of a rule can be a WebAssembly\nbinary. This allows numerical operations or negation to be\ndefined. Note that the parameter rules must follow Datalog definition.")]),e._v(" "),a("h3",{attrs:{id:"actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actions"}},[e._v("#")]),e._v(" Actions")]),e._v(" "),a("p",[e._v("Actions are used to change facts of a cell. They are callable, if all\nthe predicates defined are satisfied. To resolve the predicates, the\ntransaction is expected to provide the proof that predicates are\nsatisfied. This avoids logic engine in state transition function.")]),e._v(" "),a("p",[e._v("Requirements of action combining rules are written directly in\npredicates. The user who make the transaction is expected to provide\nall actions required in one go.")]),e._v(" "),a("p",[e._v("The first parameter of an action is always the caller (as defined in\nthe transaction). The body of an action is a WebAssembly binary blob.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("extern coin = <coin operation address>;\n\naction sell(caller, receiver: User, kitty: Kitty) where\n  owner(caller, kitty),\n  coin.transfer(receiver, caller, 100)\n=>\n  -owner(caller, kitty),\n  +owner(receiver, kitty);\n")])])]),a("p",[e._v("The above states that owner of a kitty can sell the kitty to others,\ngiven that there must be, at the same time, a transfer of 100 coin\nfrom receiver to caller.")]),e._v(" "),a("h4",{attrs:{id:"multi-party-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multi-party-actions"}},[e._v("#")]),e._v(" Multi-party Actions")]),e._v(" "),a("p",[e._v("Note that the above example given is a multi-party action. The\n"),a("code",[e._v("caller")]),e._v(" is affected in that his/her kitty is being transferred, and\nthe receiver is affected in that his/her coin needs to be transferred\nto the caller. As a result, the transaction will require\nmulti-signatures.")])])}),[],!1,null,null,null);t.default=r.exports}}]);